// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

{% if tables.count > 0 %}
import Foundation

private class RingStringsBundleToken {}

// swiftlint:disable file_length
// swiftlint:disable line_length

// swiftlint:disable type_body_length
// swiftlint:disable nesting
// swiftlint:disable variable_name
// swiftlint:disable valid_docs
{% macro parametersBlock params %}{% for type in params.types %}_ p{{forloop.counter}}: {{type}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro argumentsBlock params %}{% for type in params.types %}p{{forloop.counter}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro recursiveBlock table item sp %}
{{sp}}  {% for string in item.strings %}
{{sp}}  /// {{string.translation}}
{{sp}}  {% if string.types %}
{{sp}}  static func {{string.name|swiftIdentifier|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> LocalizableString {
{{sp}}    return {{enumName}}.tr("{{string.key}}", {% call argumentsBlock string.types %})
{{sp}}  }
{{sp}}  {% else %}
{{sp}}  static let {{string.name|swiftIdentifier|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}} = {{enumName}}.tr("{{string.key}}")
{{sp}}  {% endif %}
{{sp}}  {% endfor %}
{{sp}}  {% if item.children %}
{{sp}}  {% for child in item.children %}

{{sp}}  enum {{child.name|swiftIdentifier|snakeToCamelCase}} {
{{sp}}    {% set sp2 %}{{sp}}  {% endset %}
{{sp}}    {% call recursiveBlock table child sp2 %}
{{sp}}  }
{{sp}}  {% endfor %}
{{sp}}  {% endif %}
{% endmacro %}

// swiftlint:disable explicit_type_interface identifier_name line_length nesting type_body_length type_name
{% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
enum {{enumName}} {
  {% if tables.count > 1 %}
  {% for table in tables %}
  enum {{table.name|swiftIdentifier|snakeToCamelCase}} {
    {% call recursiveBlock table.name table.levels "  " %}
  }
  {% endfor %}
  {% else %}
  {% call recursiveBlock tables.first.name tables.first.levels "" %}
  {% endif %}
}

	struct LocalizableString {
        let key: String
        let args: [CVarArg]

        /**
         Returns String from Current Bundle
         */
        public var string: String {
            let format: String = NSLocalizedString(key, tableName: nil, bundle: Bundle(for: RingStringsBundleToken.self), value: "", comment: "")
            return String(format: format, locale: Locale.current, arguments: args)
        }

        /**
         Returns String translated from App's Bundle is found, otherwise from Current Bundle
         */
        public var smartString: String {
            // Load from App's Bundle first
            var format: String = NSLocalizedString(key, tableName: nil, bundle: Bundle.main, value: "", comment: "")
            if format != "" && format != key {
                return String(format: format, locale: Locale.current, arguments: args)
            }
            // Load from Current Bundle
            format = NSLocalizedString(key, tableName: nil, bundle: Bundle(for: RingStringsBundleToken.self), value: "", comment: "")

            return String(format: format, locale: Locale.current, arguments: args)
        }
    }

extension {{enumName}} {
  fileprivate static func tr(_ key: String, _ args: CVarArg...) -> LocalizableString {
    return LocalizableString(key: key, args: args)
  }
}

// swiftlint:enable type_body_length
// swiftlint:enable nesting
// swiftlint:enable variable_name
// swiftlint:enable valid_docs
{% else %}
// No string found
{% endif %}
